<!doctype html>
<html lang="pt-BR">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width,initial-scale=1"/>
  <title>Trollchipss • Tarefas (pronto)</title>

  <!-- Google fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600;700&display=swap" rel="stylesheet">

  <style>
    :root{
      --primary:#1e90ff; --primary-dark:#1c86ee;
      --bg:#001224; --card:#071426; --muted:#9fb0d0; --glass:rgba(255,255,255,0.03);
      --success:#20c997; --danger:#ff6b6b; --warning:#f6c85f;
      font-family: "Inter", system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
    }
    *{box-sizing:border-box}
    body{margin:0;background:linear-gradient(180deg,#041024,#071226);color:#e6eef8;min-height:100vh;padding:24px;display:flex;align-items:center;justify-content:center}
    .panel{width:100%;max-width:1100px;background:linear-gradient(180deg,var(--card),#061122);border-radius:14px;padding:20px;box-shadow:0 18px 50px rgba(2,6,23,0.8);border:1px solid rgba(255,255,255,0.02)}
    .header{display:flex;align-items:center;gap:12px;margin-bottom:14px}
    .logo{font-weight:800;color:var(--primary);font-size:20px}
    .small{color:var(--muted);font-size:13px}
    input, button, select { font-family: inherit; }
    input[type=text], input[type=password], input[type=number]{
      width:100%; padding:12px;border-radius:10px;border:1px solid rgba(255,255,255,0.03);background:var(--glass);color:inherit
    }
    .row{display:flex;gap:12px;align-items:center;margin-bottom:10px}
    .col{flex:1}
    .btn{padding:10px 14px;border-radius:10px;border:none;background:linear-gradient(90deg,var(--primary),#2fa0ff);color:#fff;cursor:pointer;font-weight:600}
    .btn.secondary{background:transparent;border:1px solid rgba(255,255,255,0.06)}
    .controls{display:flex;gap:8px;align-items:center;margin-top:12px}
    #taskGrid{display:grid;grid-template-columns:repeat(auto-fill,minmax(240px,1fr));gap:12px;margin-top:16px}
    .task-card{background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01));padding:12px;border-radius:12px;border:1px solid rgba(255,255,255,0.02);display:flex;flex-direction:column;gap:8px}
    .task-title{font-weight:700;font-size:14px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}
    .task-meta{font-size:12px;color:var(--muted)}
    .task-actions{margin-top:auto;display:flex;gap:8px}
    .toast-wrap{position:fixed;right:18px;top:18px;display:flex;flex-direction:column;gap:8px;z-index:9999}
    .toast{padding:10px 12px;border-radius:10px;background:rgba(0,0,0,0.6);border:1px solid rgba(255,255,255,0.03);min-width:220px;color:#eaf4ff}
    .toast.success{border-left:4px solid var(--success)}
    .toast.error{border-left:4px solid var(--danger)}
    .hidden{display:none}
    .debug{margin-top:12px;padding:10px;border-radius:8px;background:#02101b;color:#9fb0d0;font-size:13px;white-space:pre-wrap;max-height:220px;overflow:auto;border:1px dashed rgba(255,255,255,0.03)}
    .top-row{display:flex;gap:12px;align-items:center}
    .right{margin-left:auto}
    .badge{background:rgba(255,255,255,0.03);padding:6px 8px;border-radius:8px;font-size:12px;color:var(--muted)}
    @media(max-width:720px){ .top-row{flex-direction:column;align-items:stretch} }
  </style>
</head>
<body>

  <div class="panel" id="app">
    <div class="header">
      <div>
        <div class="logo">Trollchipss • Tarefas</div>
        <div class="small">Automação EDUSP — pronto para rodar</div>
      </div>
      <div class="right">
        <span id="userNick" class="badge"></span>
      </div>
    </div>

    <!-- LOGIN -->
    <div id="loginBox">
      <div class="row">
        <div class="col">
          <label class="small">RA</label>
          <input id="ra" type="text" placeholder="Seu RA (ex: 123456...)">
        </div>
        <div class="col">
          <label class="small">Senha</label>
          <input id="password" type="password" placeholder="Senha">
        </div>
      </div>
      <div class="row">
        <button id="btnPending" class="btn">Lições Pendentes</button>
        <button id="btnExpired" class="btn secondary">Lições Expiradas</button>
        <div style="width:12px"></div>
        <div style="display:flex;gap:8px;margin-left:auto;align-items:center">
          <label class="small" style="margin-right:6px">Min (min)</label>
          <input id="minTime" type="number" value="1" style="width:90px"/>
          <label class="small" style="margin-left:8px">Max (min)</label>
          <input id="maxTime" type="number" value="3" style="width:90px"/>
        </div>
      </div>
    </div>

    <!-- TASK AREA -->
    <div id="tasksBox" class="hidden">
      <div class="top-row">
        <div class="small" id="tasksInfo">0 lições</div>
        <div class="right">
          <label><input id="selectAll" type="checkbox"> Selecionar todas</label>
          <button id="processSelected" class="btn" style="margin-left:10px">Processar selecionadas</button>
          <button id="processAll" class="btn secondary" style="margin-left:6px">Processar todas</button>
        </div>
      </div>

      <div id="taskGrid"></div>

      <div id="noTasks" class="small" style="margin-top:12px;color:var(--muted)">Nenhuma tarefa carregada.</div>

      <div id="debugPanel" class="debug hidden"></div>
    </div>
  </div>

  <div class="toast-wrap" id="toasts"></div>

<script>
/* ====================== CONFIG - atualize para sua URL do backend ====================== */
const PY_SERVER = 'https://trollchipss-tarefas-ajh4.onrender.com'; // <- troque para sua URL do Render
/* ===================================================================================== */

/* ---------- utils ---------- */
function _toast(msg, type='info', ms=2800){
  const root = document.getElementById('toasts');
  const el = document.createElement('div');
  el.className = 'toast' + (type==='success'? ' success' : type==='error'? ' error' : '');
  el.textContent = msg;
  root.appendChild(el);
  setTimeout(()=> el.style.opacity='1', 10);
  setTimeout(()=>{ el.style.opacity='0'; setTimeout(()=>el.remove(),400); }, ms);
}

async function apiPost(path, payload){
  try{
    const res = await fetch(PY_SERVER + path, {
      method:'POST', headers:{ 'Content-Type':'application/json' }, body: JSON.stringify(payload)
    });
    const text = await res.text();
    try { return JSON.parse(text); } catch(e){ return { success:false, status: res.status, text }; }
  } catch(e){
    return { success:false, message: e.message || String(e) };
  }
}

function showDebug(txt){
  const dbg = document.getElementById('debugPanel');
  dbg.classList.remove('hidden');
  dbg.textContent = typeof txt === 'string' ? txt : JSON.stringify(txt, null, 2);
}

/* ---------- UI wiring (IDs match HTML) ---------- */
document.getElementById('btnPending').addEventListener('click', ()=> loginAndFetch('pending'));
document.getElementById('btnExpired').addEventListener('click', ()=> loginAndFetch('expired'));
document.getElementById('selectAll').addEventListener('change', e=>{
  document.querySelectorAll('#taskGrid input[type=checkbox]').forEach(cb => cb.checked = e.target.checked);
});
document.getElementById('processSelected').addEventListener('click', processSelected);
document.getElementById('processAll').addEventListener('click', processAll);

/* ---------- state ---------- */
let currentTasks = [];
let currentToken = null;
let currentFilter = 'pending';

/* ---------- Login + fetch tasks (resilient parsing) ---------- */
async function loginAndFetch(filter){
  const ra = document.getElementById('ra').value.trim();
  const pw = document.getElementById('password').value.trim();
  if(!ra || !pw){ _toast('Preencha RA e senha', 'error'); return; }
  _toast('Fazendo login...', 'info', 1200);

  const r = await apiPost('/auth', { ra, password: pw });
  if(!r || !r.success){
    console.error('/auth failed', r);
    _toast('Login falhou: ' + (r && (r.message || r.detail || r.text || r.status) || 'sem resposta'), 'error', 4500);
    if(r && (r.text || r.detail)) showDebug(r.text || r.detail);
    return;
  }

  currentToken = r.auth_token || (r.user_info && r.user_info.auth_token);
  document.getElementById('userNick').textContent = r.nick || (r.user_info && r.user_info.nick) || '';
  _toast('Login OK', 'success', 900);

  // fetch tasks
  await fetchTasks(filter);
}

/* tolerant fetchTasks: aceita responses com keys diferentes (tasks, data.items, rows, list) */
async function fetchTasks(filter){
  currentFilter = filter || 'pending';
  const infoEl = document.getElementById('tasksInfo');
  infoEl.textContent = 'Buscando...';

  const payload = { auth_token: currentToken, filter: currentFilter };
  const r = await apiPost('/tasks', payload);

  if(!r || !r.success){
    console.error('/tasks failed', r);
    _toast('Falha ao buscar tarefas: ' + (r && (r.message || r.text || r.status) || 'erro'), 'error', 4000);
    if(r) showDebug(r);
    return;
  }

  // tolerant extraction
  let tasks = [];
  if(Array.isArray(r.tasks)) tasks = r.tasks;
  else if(Array.isArray(r.data)) tasks = r.data;
  else if(Array.isArray(r.items)) tasks = r.items;
  else if(Array.isArray(r.rows)) tasks = r.rows;
  else if(Array.isArray(r.results)) tasks = r.results;
  else if(r.count && r.tasks_list && Array.isArray(r.tasks_list)) tasks = r.tasks_list;
  else if(typeof r === 'object'){
    // try deep search few common spots
    if(r.data && Array.isArray(r.data.tasks)) tasks = r.data.tasks;
    else if(r.data && Array.isArray(r.data.items)) tasks = r.data.items;
    else if(r.data && Array.isArray(r.data.rows)) tasks = r.data.rows;
  }

  // as fallback, try to find any array inside the response that looks like tasks
  if(tasks.length === 0) {
    for(const k in r){
      if(Array.isArray(r[k]) && r[k].length && typeof r[k][0] === 'object'){
        // guess this is tasks
        tasks = r[k];
        break;
      }
    }
  }

  currentTasks = tasks || [];
  renderTasks();

  infoEl.textContent = `${currentTasks.length} lição${currentTasks.length !== 1 ? 'es' : ''}`;
  document.getElementById('tasksBox').classList.remove('hidden');

  if(currentTasks.length === 0){
    _toast('Nenhuma tarefa encontrada', 'warning', 2200);
    // show raw response to help debug
    showDebug(r);
  } else {
    document.getElementById('debugPanel').classList.add('hidden');
  }
}

/* ---------- render tasks ---------- */
function renderTasks(){
  const grid = document.getElementById('taskGrid');
  grid.innerHTML = '';
  if(!currentTasks || currentTasks.length === 0){
    document.getElementById('noTasks').style.display = 'block';
    return;
  }
  document.getElementById('noTasks').style.display = 'none';

  currentTasks.forEach((t, idx) => {
    const id = t.id || t.task_id || t.taskId || t._id || ('idx' + idx);
    const title = t.title || t.name || t.task_title || t.description || ('Tarefa ' + id);
    const room = t.room || t.room_name || t.publication_target || t.class || '';
    const due = t.due_date || t.due || t.expires_at || '';

    const card = document.createElement('div');
    card.className = 'task-card';
    card.innerHTML = `
      <div class="task-title" title="${escapeHtml(title)}">${escapeHtml(title)}</div>
      <div class="task-meta">${escapeHtml(room)} • id:${escapeHtml(String(id))}</div>
      <div class="task-meta">Vencimento: ${escapeHtml(due || '—')}</div>
      <div class="task-actions">
        <label style="display:flex;align-items:center;gap:6px">
          <input type="checkbox" value="${escapeHtml(String(id))}">
          <span class="small" style="margin-left:4px">Selecionar</span>
        </label>
        <button class="btn" data-action="do" style="margin-left:auto">Processar</button>
        <button class="btn secondary" data-action="info">Ver</button>
      </div>
    `;
    // attach listeners for the buttons
    const doBtn = card.querySelector('button[data-action="do"]');
    doBtn.addEventListener('click', ()=> processSingleTask(t));
    const infoBtn = card.querySelector('button[data-action="info"]');
    infoBtn.addEventListener('click', ()=> showTaskDetails(t));
    grid.appendChild(card);
  });
}

/* ---------- small helpers ---------- */
function escapeHtml(s){ if(!s) return ''; return String(s).replace(/[&<>"'/]/g, c=>({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"/":'&#x2F;',"'":'&#39;'}[c])); }

function getSelectedTasks(){
  const checks = Array.from(document.querySelectorAll('#taskGrid input[type=checkbox]:checked'));
  const ids = checks.map(ch => ch.value);
  // match tasks by id fields tolerant
  return currentTasks.filter(t => {
    const tid = String(t.id || t.task_id || t.taskId || t._id || '');
    return ids.includes(tid);
  });
}

/* ---------- show details modal (simple) ---------- */
function showTaskDetails(task){
  // quick info via toast + debug panel
  _toast('Informação', `Tarefa id:${task.id||task.task_id||'n/a'}`, 2000);
  showDebug(task);
}

/* ---------- process single task ---------- */
let processingNow = false;
async function processSingleTask(task){
  if(processingNow){ _toast('Aguarde','Já está processando outra tarefa', 'warning'); return; }
  processingNow = true;
  _toast('Enviando tarefa...', 'info', 900);
  const tmin = parseInt(document.getElementById('minTime').value) || 1;
  const tmax = parseInt(document.getElementById('maxTime').value) || (tmin + 1);
  try{
    const res = await apiPost('/task/process', { auth_token: currentToken, task, time_min: tmin, time_max: tmax, is_draft: false });
    if(res && res.success){
      _toast(`OK: ${res.task_id || 'tarefa'}`, 'success', 3000);
    } else {
      console.error('/task/process response', res);
      _toast('Falha ao processar tarefa', 'error', 4000);
      showDebug(res);
    }
  }catch(e){
    console.error(e);
    _toast('Erro na conexão', 'error', 3000);
  } finally {
    processingNow = false;
  }
}

/* ---------- process selected / all (batch) ---------- */
async function processSelected(){
  const sels = getSelectedTasks();
  if(!sels.length){ _toast('Selecione ao menos uma tarefa', 'warning'); return; }
  await sendBatch(sels);
}
async function processAll(){
  if(!currentTasks || currentTasks.length===0){ _toast('Sem tarefas', 'warning'); return; }
  await sendBatch(currentTasks);
}

async function sendBatch(tasks){
  _toast(`Enviando ${tasks.length} tarefas...`, 'info', 900);
  const tmin = parseInt(document.getElementById('minTime').value) || 1;
  const tmax = parseInt(document.getElementById('maxTime').value) || (tmin + 1);
  try{
    const res = await apiPost('/complete', { auth_token: currentToken, tasks, time_min: tmin, time_max: tmax, is_draft: false });
    if(!res || !res.success){
      console.error('/complete failed', res);
      _toast('Processamento falhou: ' + (res && (res.message || res.text) || 'erro'), 'error', 5000);
      if(res) showDebug(res);
      return;
    }
    _toast('Processamento concluído', 'success', 2200);
    if(Array.isArray(res.results)){
      res.results.forEach(r=>{
        if(r && r.success) _toast(`OK: ${r.task_id || ''}`, 'success', 2500);
        else _toast(`ERRO: ${r.task_id || ''} ${r.message || ''}`, 'error', 3000);
      });
    } else {
      showDebug(res);
    }
  }catch(e){
    console.error(e);
    _toast('Erro durante processamento em lote', 'error', 3500);
  }
}

/* ---------- initial quick health check (optional) ---------- */
(async function init(){
  try{
    const h = await fetch(PY_SERVER + '/health').then(r=>r.json()).catch(()=>null);
    if(!h){ _toast('Aviso: servidor indisponível em ' + PY_SERVER, 'error', 5000); showDebug('Health check falhou: ' + PY_SERVER); }
    else console.log('backend health:', h);
  }catch(e){ console.warn('health check error', e); }
})();
</script>

</body>
  </html>
